
This is the C code for the isBST function
here we are assuming that we already have the Findmax and Findmin functions

int IsBST(struct BinaryTreeNode *root)
{
	if(root == NULL)
		return 1;
	if((root->left) != NULL) && Findmax(root->left) > root->data)
		return 0;
	if((root->right) != NULL) && Findmin(root->right) < root->data)
		return 0;
	if(! IsBST(root->left) || ! IsBST(root->right))
		return 0;
	return 1;
}




this is a C++ implementation using STL


template <typename T>
bool is_BST_helper(const shared_ptr<BinaryTree<T>> &r,
                    const T &lower,
                    const T &upper)
{
     if(!r)
     {
        return true;
     }
     else if(r->data < lower || r->data > upper)
     {
        return false;
     }
     return is_BST_helper(r->left, lower, r->data) &&
            is_BST_helper(r->right, r->data, upper);
}


template <typename T>
bool is_BST(const shared_ptr<BinaryTree<T>> &r)
{
     return is_BST_helper(r, numeric_limits<T>::min(), numeric_limits<T>::max());
}
